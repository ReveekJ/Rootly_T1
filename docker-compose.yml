services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "8080:8080"
    networks:
      - app_network

  db:
    image: postgres:15
    container_name: db
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - app_network
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.0
#    container_name: elasticsearch
#    environment:
#      - discovery.type=single-node
#      - ES_JAVA_OPTS=-Xms512m -Xmx512m
#    ports:
#      - "9200:9200"
#      - "9300:9300"
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:9200" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5

  rabbitmq:
    image: rabbitmq:3.11-management
    container_name: rabbitmq
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - app_network

volumes:
  le_data:
  postgres-data:
  rabbitmq-data:

networks:
  app_network:
    driver: bridge
